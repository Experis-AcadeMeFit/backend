openapi: '3.0.1'
info:
  title: MeFit API
  description: API for the MeFit Application
  version: 1.0.0
servers:
  - url: 'http://localhost:{port}/{basePath}/v{version}'
    description: 'Dev'
    variables:
      port:
        default: '8080'
      version:
        default: '1'
      basePath:
        default: 'api'
  - url: 'https://expwefitkey.herokuapp.com/{basePath}/v{version}'
    description: 'Prod'
    variables:
      version:
        default: '1'
      basePath:
        default: 'api'
paths:
  /login:
    post:
      summary: 'POST api/v1/login'
      operationId: "login"
      requestBody:
          description: 'loginRequest'
          required: true
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JwtResponse'
        400:
          description: 'Bad Request'
        401:
          description: 'Unauthorized'
        429:
          description: 'Too Many Requests'
  /refresh:
    post:
      summary: 'POST api/v1/login'
      operationId: "login"
      requestBody:
        description: 'refreshRequest'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        200:
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/JwtResponse'
        400:
          description: 'Refresh Token is expired'
        401:
          description: 'Unauthorized'
        429:
          description: 'Too Many Requests'
  /users:
    post:
      summary: 'Register a new user.'
      operationId: "createUser"
      requestBody:
        description: 'User to sign up'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        201:
          description: 'OK - User Created'
          headers:
            Location:
              description: 'Path to the created user'
              schema:
                type: string
        400:
          description: 'Bad Request - Email already exists or missing/invalid fields in request'

    get:
      summary: 'Get logged in user'
      operationId: 'getCurrentUser'
      responses:
        303:
          description: 'See Other - URL to logged in user'
          headers:
            Location:
              description: 'Path to the logged in user'
              schema:
                type: string
        401:
          description: 'Unauthorized - Not logged in'

  /users/{id}:
    get:
      summary: 'Get user by id'
      operationId: 'getUser'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of User to fetch"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Success'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'not logged in'
        403:
          description: 'User is not admin and not fetching self'

    patch:
      summary: 'Partial update of user'
      operationId: 'updateUser'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of User to update"
          required: true
          schema:
            type: "integer"
      requestBody:
        description: 'Object to patch user with'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserPatchRequest'
      responses:
        201:
          description: 'User updated'
        401:
          description: 'not logged in'
        403:
          description: 'Trying to update different user when not admin'

    delete:
      summary: 'Delete user'
      operationId: 'deleteUser'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of User to delete"
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'User deleted'
        401:
          description: 'not logged in'
        403:
          description: 'Trying to delete different user when not admin'

  /users/{id}/update_password:
    post:
      summary: ''
      operationId: 'updatePassword'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of User to change password of"
          required: true
          schema:
            type: "integer"
      requestBody:
        description: 'New password'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
      responses:
        201:
          description: 'Password updated'
        401:
          description: 'not logged in'
        403:
          description: 'Trying to update password of other user when not admin'
  /profiles:
    get:
      summary: 'Get profile of logged in user'
      operationId: 'getCurrentProfile'
      responses:
        303:
          description: 'See Other - URL to profile'
          headers:
            Location:
              description: 'Path to the logged in user'
              schema:
                type: string
        401:
          description: 'Unauthorized - Not logged in'
    post:
      summary: 'Create new profile'
      operationId: "createProfile"
      requestBody:
        description: 'Profile to create'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProfileCreateRequest'
      responses:
        201:
          description: 'OK - Profile Created'
          headers:
            Location:
              description: 'Path to the created profile'
              schema:
                type: string
        400:
          description: 'Bad Request'
        403:
          description: 'Forbidden - Trying to create profile for other user when not admin'
  /profiles/{id}:
    get:
      summary: 'Get profile by id'
      operationId: 'getProfile'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of Profile to fetch"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Success'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Profile'
        401:
          description: 'not logged in'
        403:
          description: 'User is not admin and not fetching own profile'
    patch:
      summary: 'Partial update of profile'
      operationId: 'updateProfile'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of Profile to update"
          required: true
          schema:
            type: integer
      requestBody:
        description: 'The object to patch the profile with'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProfilePatchRequest'
      responses:
        201:
          description: 'profile updated'
        401:
          description: 'not logged in'
        403:
          description: 'User is not admin and is not updating own profile'
    delete:
      summary: 'Delete profile'
      operationId: 'deleteProfile'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of profile to delete"
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'profile deleted'
        401:
          description: 'not logged in'
        403:
          description: 'User is not admin and is not deleting own profile'

  /exercises:
    get:
      summary: 'Returns a list of currently available exercises arranged alphabetically by Target muscle group'
      operationId: 'getAllExercises'
      responses:
        200:
          description: 'List of all exercises'
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Exercise'
    post:
      summary: 'Creates a new exercise. Contributor only'
      operationId: 'createExercise'
      requestBody:
        description: 'Exercise to create'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Exercise'
      responses:
        201:
          description: 'OK - Exercise Created'
          headers:
            Location:
              description: 'Path to the created exercise'
              schema:
                type: string

  /exercises/{id}:
    get:
      summary: 'Returns a single exercise corresponding to the provided id'
      operationId: 'getExercise'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of exercise to fetch"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'OK - The requested exercise'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Exercise'
    patch:
      summary: 'Execute a partial update of the exercise - Contributor only'
      operationId: 'updateExercise'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of exercise to patch"
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Fields to patch the exercise with'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Exercise'
      responses:
        200:
          description: 'Ok - Exercise updated'
    delete:
      summary: 'Delete an exercise. Contributor only'
      operationId: 'DeleteExercise'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of exercise to delete'
          required: true
          schema:
            type: integer
      responses:
        204:
          description: 'OK - exercise deleted'
        400:
          description: 'Bad Request - exercise not found'
  /programs:
    get:
      summary: 'get all programs'
      operationId: 'getAllPrograms'
      responses:
        200:
          description: 'OK - list of exercises'
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Program'
    post:
      summary: 'create a program'
      operationId: 'addProgram'
      responses:
        201:
          description: 'OK - program created'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CreateProgram'
  /programs/{id}:
    get:
      summary: 'Returns a single program corresponding to the provided id'
      operationId: 'getProgram'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of program to fetch"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'OK - The requested program'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Program'
        400:
          description: 'Not found'
    patch:
      summary: 'Execute a partial update of the program - Contributor only'
      operationId: 'updateProgram'
      parameters:
        - name: "id"
          in: "path"
          description: "Id of program to patch"
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Fields to patch the program with'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PatchProgram'
      responses:
        200:
          description: 'Ok - Program updated'
        400:
          description: 'Not found'
    delete:
      summary: 'Delete a program. Contributor only'
      operationId: 'deleteProgram'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of program to delete'
          required: true
          schema:
            type: integer
      responses:
        204:
          description: 'OK - program deleted'
        400:
          description: 'Bad Request - program not found'
  /program/{id}/workouts:
    post:
      summary: 'add a workout to a program'
      operationId: 'addWorkout'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of program to add workout to'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'workout to add to program'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/WorkoutId'
      responses:
        204:
          description: 'OK - workout added'
        400:
          description: 'Program or workout does not exist'
    delete:
      summary: 'remove a workout from a program'
      operationId: 'removeWorkout'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of program to remove workout from'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'workout to remove from program'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/WorkoutId'
      responses:
        204:
          description: 'OK - workout removed'
        400:
          description: 'Program or workout does not exist'
  /goals:
    get:
      summary: 'Returns detail about current state of the users current goals'
      operationId: 'getGoals'
      responses:
        200:
          description: 'OK - workout removed'
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Goal'
    post:
      summary: 'Creates a new goal'
      operationId: 'createGoal'
      requestBody:
        description: 'Goal to create'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Goal'
      responses:
        201:
          description: 'Created - goal created'
          headers:
            Location:
              description: 'Path to the created goal'
              schema:
                type: string
  /goals/{id}:
    get:
      summary: 'Returns a specific goal'
      operationId: 'getGoal'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of goal to fetch'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'OK'
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Goal'
        403:
          description: 'User is not admin and goal does not belong to the user'
    patch:
      summary: 'Partial update of a goal'
      operationId: 'updateGoal'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of goal to update'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Field to patch the goal with'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Goal'
      responses:
        200:
          description: 'OK - workout removed'
        400:
          description: 'Bad request'
        403:
          description: 'Forbidden'
        404:
          description: 'Not found'
    delete:
      summary: 'delete a goal'
      operationId: 'deleteGoal'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of goal to delete'
          required: true
          schema:
            type: integer
      responses:
        204:
          description: 'OK - goal removed'
        403:
          description: 'Goal does not belong to user'
  /goals/{id}/goalworkouts:
    post:
      summary: 'add workout to goal'
      operationId: 'addWorkout'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of goal to add workouts to'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'list of workouts to add'
        required: true
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GoalWorkoutRequest'
      responses:
        204:
          description: 'OK - workout removed'
        400:
          description: 'Bad request'
        403:
          description: 'Forbidden'
  /goals/{id}/goalworkouts/{goalWorkoutId}:
    patch:
      summary: 'update a workout in a goal'
      operationId: 'addWorkout'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of goal'
          required: true
          schema:
            type: integer
        - name: 'goalWorkoutId'
          in: 'path'
          description: 'Id of goal workout'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'fields to update'
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/GoalWorkoutPatch'
      responses:
        204:
          description: 'OK - updated'
        400:
          description: 'Bad request'
        403:
          description: 'Forbidden'
    delete:
      summary: 'remove a workout from a goal'
      operationId: 'addWorkout'
      parameters:
        - name: 'id'
          in: 'path'
          description: 'Id of goal'
          required: true
          schema:
            type: integer
        - name: 'goalWorkoutId'
          in: 'path'
          description: 'Id of goal workout'
          required: true
          schema:
            type: integer
      responses:
        204:
          description: 'OK - workout removed'
        400:
          description: 'Bad Request'
        403:
          description: 'Forbidden'

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    RefreshRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token
    JwtResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
        session_state:
          type: string
        expires_in:
          type: integer
        refresh_expires_in:
          type: integer
        not_before_policy:
          type: integer
    PasswordChangeRequest:
      type: object
      properties:
        password:
          type: string
          maxLength: 120
      required:
        - password
    SignupRequest:
      type: object
      properties:
        email:
          type: string
          maxLength: 50
        firstname:
          type: string
          maxLength: 30
        lastname:
          type: string
          maxLength: 30
        password:
          type: string
          maxLength: 120
      required:
        - email
        - firstname
        - lastname
        - password
    UserPatchRequest:
      type: object
      properties:
        email:
          type: string
          maxLength: 50
        firstname:
          type: string
          maxLength: 30
        lastname:
          type: string
          maxLength: 30
        roles:
          type: array
          items:
            type: string
            enum: [ROLE_USER, ROLE_CONTRIBUTOR, ROLE_ADMIN]
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          maxLength: 50
        firstname:
          type: string
          maxLength: 30
        lastname:
          type: string
          maxLength: 30
        profile:
          type: string
          nullable: true
          description: reference to the profile belonging to this user or null
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              role:
                type: string
                enum: [ ROLE_USER, ROLE_CONTRIBUTOR, ROLE_ADMIN ]
    Address:
      type: object
      properties:
        addressLine1:
          type: string
          maxLength: 100
        addressLine2:
          type: string
          maxLength: 100
        addressLine3:
          type: string
          maxLength: 100
        postalCode:
          type: string
          maxLength: 20
        city:
          type: string
          maxLength: 30
        country:
          type: string
          maxLength: 40
      required:
        - addressLine1
        - postalCode
        - city
        - country

    AddressPatchRequest:
      type: object
      properties:
        addressLine1:
          type: string
          maxLength: 100
        addressLine2:
          type: string
          maxLength: 100
        addressLine3:
          type: string
          maxLength: 100
        postalCode:
          type: string
          maxLength: 20
        city:
          type: string
          maxLength: 30
        country:
          type: string
          maxLength: 40

    Profile:
      type: object
      properties:
        id:
          type: integer
        user:
          type: string
          description: reference to the user this profile belongs to
        address:
          $ref: '#/components/schemas/Address'
        weight:
          type: integer
        height:
          type: integer

    ProfileCreateRequest:
      type: object
      properties:
        userId:
          type: integer
          description: The id of the user this profile should belong to
        address:
          $ref: '#/components/schemas/Address'
        weight:
          type: integer
        height:
          type: integer
    ProfilePatchRequest:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressPatchRequest'
        weight:
          type: integer
        height:
          type: integer
    Exercise:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        targetMuscleGroup:
          type: string
        image:
          type: string
        videoUrl:
          type: string
    Program:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        category:
          type: string
        workouts:
          type: array
          items:
            $ref: '#/components/schemas/Workout'
    CreateProgram:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        workouts:
          type: array
          items:
            $ref: '#/components/schemas/Workout'
    PatchProgram:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
    Workout:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        workoutSets:
          type: array
          items:
            $ref: '#/components/schemas/WorkoutSet'
    WorkoutRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 40
        type:
          type: string
          maxLength: 40
        exerciseSets:
          type: array
          items:
            $ref: '#/components/schemas/SetRequest'
    SetRequest:
      type: object
      properties:
        exerciseRepetitions:
          type: integer
        sets:
          type: integer
        exerciseId:
          type: integer
    WorkoutSet:
      type: object
      properties:
        id:
          type: integer
        exerciseRepetitions:
          type: integer
        sets:
          type: integer
        exercise:
          type: string
          description: 'Path to exercise'
    WorkoutId:
      type: object
      properties:
        id:
         type: integer
    Goal:
      type: object
      properties:
        id:
          type: integer
        startDate:
          type: string
          description: 'yyyy-MM-dd'
        endDate:
          type: string
          description: 'yyyy-MM-dd'
        completed:
          type: boolean
        goalWorkouts:
          type: array
          items:
            $ref: '#/components/schemas/GoalWorkout'
    GoalPatch:
      type: object
      properties:
        id:
          type: integer
        startDate:
          type: string
          description: 'yyyy-MM-dd'
        endDate:
          type: string
          description: 'yyyy-MM-dd'
    GoalWorkout:
      type: object
      properties:
        id:
          type: integer
        endDate:
          type: string
          description: 'yyyy-MM-dd'
        workout:
          type: string
          description: 'path to workout'
        completed:
          type: boolean
    GoalWorkoutPatch:
      type: object
      properties:
        endDate:
          type: string
          description: 'yyyy-MM-dd'
        completed:
          type: boolean
    GoalWorkoutRequest:
      type: object
      properties:
        endDate:
          type: string
          description: 'yyyy-MM-dd'
        workoutId:
          type: integer
